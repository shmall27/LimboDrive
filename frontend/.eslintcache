[{"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js":"1","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js":"2","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js":"3","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js":"4","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js":"5","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js":"6","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js":"7","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js":"8","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/RoomSelection.js":"9","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js":"10","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/DirName.js":"11","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useOnClickOutside.js":"12","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useKeyPress.js":"13","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UserInvite.js":"14"},{"size":152,"mtime":1612041815828,"results":"15","hashOfConfig":"16"},{"size":2025,"mtime":1613582162262,"results":"17","hashOfConfig":"16"},{"size":2349,"mtime":1613427477710,"results":"18","hashOfConfig":"16"},{"size":1454,"mtime":1612899126121,"results":"19","hashOfConfig":"16"},{"size":440,"mtime":1610651874344,"results":"20","hashOfConfig":"16"},{"size":1326,"mtime":1611095112831,"results":"21","hashOfConfig":"16"},{"size":474,"mtime":1613230668752,"results":"22","hashOfConfig":"16"},{"size":336,"mtime":1612044911027,"results":"23","hashOfConfig":"16"},{"size":2147,"mtime":1613285010464,"results":"24","hashOfConfig":"16"},{"size":1101,"mtime":1613287269716,"results":"25","hashOfConfig":"16"},{"size":3105,"mtime":1613282797857,"results":"26","hashOfConfig":"16"},{"size":1106,"mtime":1613255385466,"results":"27","hashOfConfig":"16"},{"size":1020,"mtime":1613255352906,"results":"28","hashOfConfig":"16"},{"size":917,"mtime":1613286572324,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"u76372",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js",[],["64","65"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/RoomSelection.js",["66"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction RoomSelection() {\n  const [dirName, setDirName] = useState(null);\n  useEffect(async () => {\n    if (localStorage.length > 0) {\n      axios\n        .post('http://localhost:2000/rooms', {\n          jwt: JSON.parse(window.localStorage.getItem('jwt')).data\n        })\n        .then(\n          response => {\n            setDirName(response.data);\n          },\n          error => {\n            console.log(error);\n          }\n        );\n    }\n  }, []);\n  if (localStorage.length > 0) {\n    return (\n      <>\n        <h3>Select a room or create a new one!</h3>\n        <br />\n        <button\n          onClick={e => {\n            e.preventDefault();\n            if (localStorage.length > 0) {\n              axios\n                .post('http://localhost:2000/room-create', {\n                  jwt: JSON.parse(window.localStorage.getItem('jwt')).data\n                })\n                .then(\n                  response => {},\n                  error => {\n                    console.log(error);\n                  }\n                );\n            }\n          }}\n          type=\"button\"\n        >\n          Create a new room!\n        </button>\n        {dirName &&\n          dirName.map(dirs => (\n            <p\n              onClick={e => {\n                if (localStorage.length > 0) {\n                  axios\n                    .post('http://localhost:2000/room-select', {\n                      jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n                      dirID: dirs[1]\n                    })\n                    .then(\n                      response => {\n                        window.location.href = `http://localhost:3000/rooms/${dirs[1]}`;\n                      },\n                      error => {\n                        console.log(error);\n                      }\n                    );\n                }\n              }}\n              key={dirs[1]}\n            >\n              {dirs[0]}\n            </p>\n          ))}\n      </>\n    );\n  } else {\n    window.location.href = 'http://localhost:3000/';\n  }\n}\n\nexport default RoomSelection;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js",["67"],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nimport UploadForm from './UploadForm';\nimport DirName from './DirName';\nimport UserInvite from './UserInvite';\n\nimport './styles.css';\n\nfunction Room() {\n  const [res, setRes] = useState(null);\n  const { dirID } = useParams();\n  useEffect(() => {\n    if (localStorage.length > 0) {\n      axios\n        .post('http://localhost:2000/rooms-files/', {\n          jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n          dirID\n        })\n        .then(\n          response => {\n            setRes(response.data);\n          },\n          error => {\n            console.log(error);\n          }\n        );\n    }\n  }, []);\n  return (\n    <>\n      {res && (\n        <DirName\n          dirID={dirID}\n          text={res.dirName}\n          onSetText={text => setRes({ dirName: text, fileTree: res.fileTree })}\n        />\n      )}\n      {res && <UploadForm fileTree={res.fileTree} dirID={dirID} />}\n      {res && <UserInvite dirID={dirID} />}\n    </>\n  );\n}\n\nexport default Room;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/DirName.js",["68"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport useKeypress from '../hooks/useKeyPress';\nimport useOnClickOutside from '../hooks/useOnClickOutside';\nfunction DirName(props) {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(props.text);\n  const wrapperRef = useRef(null);\n  const textRef = useRef(null);\n  const inputRef = useRef(null);\n  const enter = useKeypress('Enter');\n  const esc = useKeypress('Escape');\n  // check to see if the user clicked outside of this component\n  useOnClickOutside(wrapperRef, () => {\n    if (isInputActive) {\n      props.onSetText(inputValue);\n      setIsInputActive(false);\n      if (props.text !== inputValue) {\n        //Update database here\n        axios\n          .post('http://localhost:2000/update-name', {\n            jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n            dirName: inputValue,\n            dirID: props.dirID\n          })\n          .then(\n            response => {\n              console.log(response);\n            },\n            error => {\n              console.log(error);\n            }\n          );\n      }\n    }\n  });\n  // focus the cursor in the input field on edit start\n  useEffect(() => {\n    if (isInputActive) {\n      inputRef.current.focus();\n    }\n  }, [isInputActive]);\n  useEffect(() => {\n    if (isInputActive) {\n      // if Enter is pressed, save the text and case the editor\n      if (enter) {\n        props.onSetText(inputValue);\n        setIsInputActive(false);\n        if (props.text !== inputValue) {\n          //Update database here\n          axios\n            .post('http://localhost:2000/update-name', {\n              jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n              dirName: inputValue,\n              dirID: props.dirID\n            })\n            .then(\n              response => {\n                console.log(response);\n              },\n              error => {\n                console.log(error);\n              }\n            );\n        }\n      }\n      // if Escape is pressed, revert the text and close the editor\n      if (esc) {\n        setInputValue(props.text);\n        setIsInputActive(false);\n      }\n    }\n  }, [enter, esc]); // watch the Enter and Escape key presses\n  return (\n    <span className=\"inline-text\" ref={wrapperRef}>\n      <span\n        ref={textRef}\n        onClick={() => setIsInputActive(true)}\n        className={`inline-text_copy inline-text_copy--${\n          !isInputActive ? 'active' : 'hidden'\n        }`}\n      >\n        {props.text}\n      </span>\n      <input\n        ref={inputRef}\n        // set the width to the input length multiplied by the x height\n        // it's not quite right but gets it close\n        style={{ width: Math.ceil(inputValue.length * 0.9) + 'ex' }}\n        value={inputValue}\n        onChange={e => {\n          setInputValue(e.target.value);\n        }}\n        className={`inline-text_input inline-text_input--${\n          isInputActive ? 'active' : 'hidden'\n        }`}\n      />\n    </span>\n  );\n}\nexport default DirName;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useOnClickOutside.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useKeyPress.js",["69"],"// hook from https://usehooks.com/useKeyPress/\nimport { useState, useEffect } from 'react';\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UserInvite.js",["70"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction UserInvite(props) {\n  const [userInvite, setUserInvite] = useState('');\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        if (localStorage.length > 0) {\n          axios\n            .post('http://localhost:2000/invite-user', {\n              jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n              userEmail: userInvite,\n              dirID: props.dirID\n            })\n            .then(\n              response => {},\n              error => {\n                console.log(error);\n              }\n            );\n        }\n      }}\n    >\n      <input\n        type=\"text\"\n        placeholder=\"Invite via email\"\n        onChange={e => {\n          setUserInvite(e.target.value);\n        }}\n      />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\nexport default UserInvite;\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":6,"column":13,"nodeType":"77","endLine":21,"endColumn":4},{"ruleId":"75","severity":1,"message":"78","line":30,"column":6,"nodeType":"79","endLine":30,"endColumn":8,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":73,"column":6,"nodeType":"79","endLine":73,"endColumn":18,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"83","line":32,"column":6,"nodeType":"79","endLine":32,"endColumn":8,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":36},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'dirID'. Either include it or remove the dependency array.","ArrayExpression",["91"],"React Hook useEffect has missing dependencies: 'inputValue', 'isInputActive', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["92"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["93"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [dirID]",{"range":"100","text":"101"},"Update the dependencies array to be: [enter, esc, inputValue, isInputActive, props]",{"range":"102","text":"103"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"104","text":"105"},[743,745],"[dirID]",[2243,2255],"[enter, esc, inputValue, isInputActive, props]",[894,896],"[downHandler, upHandler]"]