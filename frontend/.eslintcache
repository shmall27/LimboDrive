[{"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\index.js":"1","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\App.js":"2","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Room.js":"3","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\RoomSelection.js":"4","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Home.js":"5","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\DirName.js":"6","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UserInvite.js":"7","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UploadForm.js":"8","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\SignUp.js":"9","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Login.js":"10","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useOnClickOutside.js":"11","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useKeyPress.js":"12","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\FileUI.js":"13"},{"size":157,"mtime":1612932011065,"results":"14","hashOfConfig":"15"},{"size":491,"mtime":1613600313626,"results":"16","hashOfConfig":"15"},{"size":1551,"mtime":1615904489486,"results":"17","hashOfConfig":"15"},{"size":2220,"mtime":1613742664281,"results":"18","hashOfConfig":"15"},{"size":900,"mtime":1615895147800,"results":"19","hashOfConfig":"15"},{"size":3206,"mtime":1613600313627,"results":"20","hashOfConfig":"15"},{"size":943,"mtime":1613742452829,"results":"21","hashOfConfig":"15"},{"size":9174,"mtime":1615904606068,"results":"22","hashOfConfig":"15"},{"size":1633,"mtime":1615897846032,"results":"23","hashOfConfig":"15"},{"size":1681,"mtime":1615904640737,"results":"24","hashOfConfig":"15"},{"size":1141,"mtime":1613600313638,"results":"25","hashOfConfig":"15"},{"size":1057,"mtime":1613600313637,"results":"26","hashOfConfig":"15"},{"size":3831,"mtime":1615782885550,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1tdyov6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\index.js",[],["60","61"],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\App.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Room.js",["62"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport UploadForm from './UploadForm';\r\nimport DirName from './DirName';\r\nimport UserInvite from './UserInvite';\r\n\r\nimport './styles.css';\r\n\r\nconst io = require('socket.io-client');\r\nconst socket = io('https://limbo-drive.herokuapp.com/');\r\n\r\nfunction Room() {\r\n  const [dirName, setDirName] = useState(null);\r\n  const [userFiles, setUserFiles] = useState(null);\r\n  const { dirID } = useParams();\r\n\r\n  socket.on('Update', (data) => {\r\n    setDirName(data.dirName);\r\n    setUserFiles(data.userFiles);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (localStorage.length > 0) {\r\n      axios\r\n        .post('https://limbo-drive.herokuapp.com/rooms-files/', {\r\n          jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n          dirID,\r\n        })\r\n        .then(\r\n          (response) => {\r\n            setDirName(response.data.dirName);\r\n            setUserFiles(response.data.userFiles);\r\n          },\r\n          (error) => {\r\n            console.log(error);\r\n          }\r\n        );\r\n    }\r\n  }, []);\r\n  return (\r\n    <>\r\n      {dirName && userFiles && (\r\n        <DirName\r\n          dirID={dirID}\r\n          text={dirName}\r\n          onSetText={(text) => setDirName(text)}\r\n        />\r\n      )}\r\n      {dirName && userFiles && (\r\n        <UploadForm fileTree={userFiles} dirID={dirID} socket={socket} />\r\n      )}\r\n      {dirName && userFiles && <UserInvite dirID={dirID} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\RoomSelection.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Home.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\DirName.js",["63"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport useKeypress from '../hooks/useKeyPress';\r\nimport useOnClickOutside from '../hooks/useOnClickOutside';\r\nfunction DirName(props) {\r\n  const [isInputActive, setIsInputActive] = useState(false);\r\n  const [inputValue, setInputValue] = useState(props.text);\r\n  const wrapperRef = useRef(null);\r\n  const textRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  const enter = useKeypress('Enter');\r\n  const esc = useKeypress('Escape');\r\n  // check to see if the user clicked outside of this component\r\n  useOnClickOutside(wrapperRef, () => {\r\n    if (isInputActive) {\r\n      props.onSetText(inputValue);\r\n      setIsInputActive(false);\r\n      if (props.text !== inputValue) {\r\n        //Update database here\r\n        axios\r\n          .post('http://localhost:2000/update-name', {\r\n            jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n            dirName: inputValue,\r\n            dirID: props.dirID\r\n          })\r\n          .then(\r\n            response => {\r\n              console.log(response);\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            }\r\n          );\r\n      }\r\n    }\r\n  });\r\n  // focus the cursor in the input field on edit start\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isInputActive]);\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      // if Enter is pressed, save the text and case the editor\r\n      if (enter) {\r\n        props.onSetText(inputValue);\r\n        setIsInputActive(false);\r\n        if (props.text !== inputValue) {\r\n          //Update database here\r\n          axios\r\n            .post('http://localhost:2000/update-name', {\r\n              jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n              dirName: inputValue,\r\n              dirID: props.dirID\r\n            })\r\n            .then(\r\n              response => {\r\n                console.log(response);\r\n              },\r\n              error => {\r\n                console.log(error);\r\n              }\r\n            );\r\n        }\r\n      }\r\n      // if Escape is pressed, revert the text and close the editor\r\n      if (esc) {\r\n        setInputValue(props.text);\r\n        setIsInputActive(false);\r\n      }\r\n    }\r\n  }, [enter, esc]); // watch the Enter and Escape key presses\r\n  return (\r\n    <span className=\"inline-text\" ref={wrapperRef}>\r\n      <span\r\n        ref={textRef}\r\n        onClick={() => setIsInputActive(true)}\r\n        className={`inline-text_copy inline-text_copy--${\r\n          !isInputActive ? 'active' : 'hidden'\r\n        }`}\r\n      >\r\n        {props.text}\r\n      </span>\r\n      <input\r\n        ref={inputRef}\r\n        // set the width to the input length multiplied by the x height\r\n        // it's not quite right but gets it close\r\n        style={{ width: Math.ceil(inputValue.length * 0.9) + 'ex' }}\r\n        value={inputValue}\r\n        onChange={e => {\r\n          setInputValue(e.target.value);\r\n        }}\r\n        className={`inline-text_input inline-text_input--${\r\n          isInputActive ? 'active' : 'hidden'\r\n        }`}\r\n      />\r\n    </span>\r\n  );\r\n}\r\nexport default DirName;\r\n","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UserInvite.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UploadForm.js",["64"],"/* eslint-disable eqeqeq */\r\nimport React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport FileUI from './FileUI';\r\nconst mime = require('mime-types');\r\n\r\nconst packetSize = 16 * 1024;\r\nlet db;\r\nlet indexedDBArr = [];\r\nlet queue = [];\r\nlet bufferQueue = [];\r\n\r\nfunction treeSearch(tree, search) {\r\n  for (const item of tree) {\r\n    if (item.path == search) {\r\n      return item.handle;\r\n    }\r\n    if (!item.children) continue;\r\n    const result = treeSearch(item.children, search);\r\n    if (result) return result;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction UploadForm(props) {\r\n  async function hostUploadFile(reqFile, reqSocket, sliceNum, host, path) {\r\n    const file = await reqFile.getFile();\r\n    let fullFile = await file.arrayBuffer();\r\n    fullFile = new Uint8Array(fullFile);\r\n    const percentComplete =\r\n      ((sliceNum * packetSize) / fullFile.byteLength) * 100;\r\n    console.log(percentComplete);\r\n\r\n    if ((sliceNum - 1) * packetSize <= fullFile.byteLength) {\r\n      const packet = fullFile.slice(\r\n        (sliceNum - 1) * packetSize,\r\n        sliceNum * packetSize\r\n      );\r\n      props.socket.emit('toServerPacket', {\r\n        packet,\r\n        path,\r\n        cone: reqSocket,\r\n        host,\r\n        sliceNum,\r\n      });\r\n    } else {\r\n      props.socket.emit('toServerPacket', {\r\n        cone: reqSocket,\r\n        path,\r\n        msg: 'done',\r\n      });\r\n\r\n      for (let i = 0; i < queue.length; i++) {\r\n        if (queue[i].handle == reqSocket) {\r\n          queue.splice(i, 1);\r\n        }\r\n      }\r\n      console.log('Upload Complete!');\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    //Save file to indexedDB\r\n    let request = indexedDB.open('virtualFS');\r\n\r\n    request.onupgradeneeded = (e) => {\r\n      db = e.target.result;\r\n      db.createObjectStore('file_tree', {\r\n        keyPath: 'name',\r\n      });\r\n    };\r\n\r\n    request.onerror = (e) => {\r\n      console.log('There was an error creating an indexedDB');\r\n    };\r\n\r\n    request.onsuccess = (e) => {\r\n      db = e.target.result;\r\n      const tx = db.transaction('file_tree', 'readonly');\r\n      const req = tx.objectStore('file_tree');\r\n      const cursor = req.openCursor();\r\n      cursor.onsuccess = (e) => {\r\n        const cursor = e.target.result;\r\n        if (cursor) {\r\n          indexedDBArr.push(cursor.value);\r\n          cursor.continue();\r\n        }\r\n      };\r\n    };\r\n\r\n    props.socket.emit('userSocket', {\r\n      userID: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n      dirID: props.dirID,\r\n    });\r\n\r\n    props.socket.on('selectedFile', async (data) => {\r\n      let selectedFile = null;\r\n      if (indexedDBArr.length > 0) {\r\n        //initReqFile is the handle of the file that has been requested\r\n        let found = false;\r\n        if (queue.length > 0) {\r\n          for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].path == data.path) {\r\n              found = true;\r\n              selectedFile = queue[i].handle;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (!found) {\r\n          selectedFile = treeSearch(indexedDBArr, data.path);\r\n          queue.push({\r\n            path: data.path,\r\n            handle: selectedFile,\r\n          });\r\n        }\r\n        const status = await selectedFile.queryPermission({ mode: 'read' });\r\n        if (status != 'granted') {\r\n          await selectedFile.requestPermission().catch(function (error) {\r\n            console.error(error);\r\n          });\r\n        } else {\r\n          hostUploadFile(\r\n            selectedFile,\r\n            data.cone,\r\n            data.sliceNum,\r\n            data.host,\r\n            data.path\r\n          );\r\n        }\r\n      } else {\r\n        console.log('This file is not in indexedDB');\r\n      }\r\n    });\r\n\r\n    props.socket.on('toConePacket', (data) => {\r\n      if (!data.msg) {\r\n        let nextSliceReq = data.sliceNum + 1;\r\n        // Combine buffer arrays into large buffer array\r\n        let found = false;\r\n        if (bufferQueue.length > 0) {\r\n          for (let i = 0; i < bufferQueue.length; i++) {\r\n            if (bufferQueue[i].path == data.path) {\r\n              found = true;\r\n              bufferQueue[i].buffer.push(data.packet);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!found) {\r\n          bufferQueue.push({\r\n            path: data.path,\r\n            buffer: [data.packet],\r\n          });\r\n        }\r\n\r\n        props.socket.emit('toServerRequestDetails', {\r\n          cone: data.cone,\r\n          path: data.path,\r\n          host: data.host,\r\n          sliceNum: nextSliceReq,\r\n        });\r\n      } else {\r\n        if (bufferQueue.length > 0) {\r\n          for (let i = 0; i < bufferQueue.length; i++) {\r\n            if (bufferQueue[i].path === data.path) {\r\n              const file = new Blob(bufferQueue[i].buffer, {\r\n                type: mime.lookup(data.path),\r\n              });\r\n              const link = document.createElement('a');\r\n              link.href = window.URL.createObjectURL(file);\r\n              link.download = data.path.match(/[^/]+$/g);\r\n              link.click();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const prevTime = Date.parse(localStorage.getItem('disTime'));\r\n    const curTime = new Date();\r\n    if (curTime - prevTime > 5000) {\r\n      window.indexedDB.deleteDatabase('virtualFS');\r\n      console.log('Delete database!');\r\n\r\n      axios\r\n        .post('http://localhost:2000/delete-tree', {\r\n          jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n        })\r\n        .then(\r\n          (response) => {\r\n            console.log(response);\r\n          },\r\n          (error) => {\r\n            console.log(error);\r\n          }\r\n        );\r\n    }\r\n  }, []);\r\n\r\n  window.onbeforeunload = () => {\r\n    localStorage.setItem('disTime', new Date());\r\n  };\r\n\r\n  if (localStorage.length > 0) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            id='standard-upload'\r\n            onClick={async () => {\r\n              const dirHandle = await window.showDirectoryPicker();\r\n              const fileTree = await fileRecursion(dirHandle, '');\r\n\r\n              async function fileRecursion(folder, path) {\r\n                let miniTree = {\r\n                  name: folder.name,\r\n                  handle: folder,\r\n                  expand: false,\r\n                  children: [],\r\n                  path: path + '/' + String(folder.name),\r\n                };\r\n                for await (const entry of folder.values()) {\r\n                  if (entry.kind == 'directory') {\r\n                    miniTree['children'].push(\r\n                      await fileRecursion(entry, miniTree.path)\r\n                    );\r\n                  } else {\r\n                    miniTree['children'].push({\r\n                      name: entry.name,\r\n                      handle: entry,\r\n                      expand: false,\r\n                      children: [],\r\n                      path: miniTree.path + '/' + String(entry.name),\r\n                    });\r\n                  }\r\n                }\r\n                return miniTree;\r\n              }\r\n\r\n              const rx = db.transaction('file_tree', 'readwrite');\r\n              rx.onerror = (e) => console.log(`Error: ${e.target.error}`);\r\n              rx.objectStore('file_tree').add(fileTree);\r\n              indexedDBArr.push(fileTree);\r\n\r\n              //Send files to express server\r\n              if (localStorage.length > 0) {\r\n                axios\r\n                  .post('http://localhost:2000/upload', {\r\n                    dirID: props.dirID,\r\n                    fileTree: {\r\n                      name: fileTree.name,\r\n                      path: fileTree.path,\r\n                      children: fileTree.children,\r\n                    },\r\n                    jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n                  })\r\n                  .then(\r\n                    (response) => {\r\n                      console.log(response);\r\n                    },\r\n                    (error) => {\r\n                      console.log(error);\r\n                    }\r\n                  );\r\n              } else console.log('Please sign in.');\r\n            }}\r\n          >\r\n            Upload Folders\r\n          </button>\r\n        </div>\r\n\r\n        <div id='upload-console'>\r\n          {props.fileTree &&\r\n            props.socket &&\r\n            props.fileTree.map((userUpload) => {\r\n              if (userUpload.fileTree.length > 0) {\r\n                return (\r\n                  <div key={userUpload._id}>\r\n                    <h3>{userUpload.hostEmail}</h3>\r\n                    <FileUI\r\n                      hostEmail={userUpload.hostEmail}\r\n                      items={userUpload.fileTree}\r\n                      dirID={props.dirID}\r\n                      host={userUpload.hostID}\r\n                      depth={0}\r\n                      socket={props.socket}\r\n                    />\r\n                  </div>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            })}\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    window.location.href = 'http://localhost:3000/';\r\n  }\r\n}\r\n\r\nexport default UploadForm;\r\n","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\SignUp.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Login.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useOnClickOutside.js",[],["65","66"],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useKeyPress.js",["67"],"// hook from https://usehooks.com/useKeyPress/\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Hook\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress;\r\n","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\FileUI.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":41,"column":6,"nodeType":"74","endLine":41,"endColumn":8,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":73,"column":6,"nodeType":"74","endLine":73,"endColumn":18,"suggestions":"77"},{"ruleId":"72","severity":1,"message":"78","line":200,"column":6,"nodeType":"74","endLine":200,"endColumn":8,"suggestions":"79"},{"ruleId":"68","replacedBy":"80"},{"ruleId":"70","replacedBy":"81"},{"ruleId":"72","severity":1,"message":"82","line":32,"column":6,"nodeType":"74","endLine":32,"endColumn":8,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dirID'. Either include it or remove the dependency array.","ArrayExpression",["86"],"React Hook useEffect has missing dependencies: 'inputValue', 'isInputActive', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["87"],"React Hook useEffect has missing dependencies: 'hostUploadFile', 'props.dirID', and 'props.socket'. Either include them or remove the dependency array.",["88"],["84"],["85"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [dirID]",{"range":"98","text":"99"},"Update the dependencies array to be: [enter, esc, inputValue, isInputActive, props]",{"range":"100","text":"101"},"Update the dependencies array to be: [hostUploadFile, props.dirID, props.socket]",{"range":"102","text":"103"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"104","text":"105"},[1127,1129],"[dirID]",[2315,2327],"[enter, esc, inputValue, isInputActive, props]",[5698,5700],"[hostUploadFile, props.dirID, props.socket]",[925,927],"[downHandler, upHandler]"]