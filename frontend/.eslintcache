[{"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\index.js":"1","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\App.js":"2","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\RoomSelection.js":"3","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Room.js":"4","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Home.js":"5","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\DirName.js":"6","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UploadForm.js":"7","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UserInvite.js":"8","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\SignUp.js":"9","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Login.js":"10","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\FileUI.js":"11","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useKeyPress.js":"12","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useOnClickOutside.js":"13"},{"size":157,"mtime":1612932011065,"results":"14","hashOfConfig":"15"},{"size":491,"mtime":1613600313626,"results":"16","hashOfConfig":"15"},{"size":2220,"mtime":1613742664281,"results":"17","hashOfConfig":"15"},{"size":1147,"mtime":1613600313631,"results":"18","hashOfConfig":"15"},{"size":354,"mtime":1612932011059,"results":"19","hashOfConfig":"15"},{"size":3206,"mtime":1613600313627,"results":"20","hashOfConfig":"15"},{"size":2429,"mtime":1613600313634,"results":"21","hashOfConfig":"15"},{"size":943,"mtime":1613742452829,"results":"22","hashOfConfig":"15"},{"size":1388,"mtime":1611548005079,"results":"23","hashOfConfig":"15"},{"size":1518,"mtime":1612932011061,"results":"24","hashOfConfig":"15"},{"size":1880,"mtime":1613780637700,"results":"25","hashOfConfig":"15"},{"size":1057,"mtime":1613600313637,"results":"26","hashOfConfig":"15"},{"size":1141,"mtime":1613600313638,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1tdyov6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\index.js",[],["58","59"],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\App.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\RoomSelection.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Room.js",["60"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport UploadForm from './UploadForm';\r\nimport DirName from './DirName';\r\nimport UserInvite from './UserInvite';\r\n\r\nimport './styles.css';\r\n\r\nfunction Room() {\r\n  const [res, setRes] = useState(null);\r\n  const { dirID } = useParams();\r\n  useEffect(() => {\r\n    if (localStorage.length > 0) {\r\n      axios\r\n        .post('http://localhost:2000/rooms-files/', {\r\n          jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n          dirID\r\n        })\r\n        .then(\r\n          response => {\r\n            setRes(response.data);\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        );\r\n    }\r\n  }, []);\r\n  return (\r\n    <>\r\n      {res && (\r\n        <DirName\r\n          dirID={dirID}\r\n          text={res.dirName}\r\n          onSetText={text => setRes({ dirName: text, fileTree: res.fileTree })}\r\n        />\r\n      )}\r\n      {res && <UploadForm fileTree={res.fileTree} dirID={dirID} />}\r\n      {res && <UserInvite dirID={dirID} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Home.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\DirName.js",["61"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport useKeypress from '../hooks/useKeyPress';\r\nimport useOnClickOutside from '../hooks/useOnClickOutside';\r\nfunction DirName(props) {\r\n  const [isInputActive, setIsInputActive] = useState(false);\r\n  const [inputValue, setInputValue] = useState(props.text);\r\n  const wrapperRef = useRef(null);\r\n  const textRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  const enter = useKeypress('Enter');\r\n  const esc = useKeypress('Escape');\r\n  // check to see if the user clicked outside of this component\r\n  useOnClickOutside(wrapperRef, () => {\r\n    if (isInputActive) {\r\n      props.onSetText(inputValue);\r\n      setIsInputActive(false);\r\n      if (props.text !== inputValue) {\r\n        //Update database here\r\n        axios\r\n          .post('http://localhost:2000/update-name', {\r\n            jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n            dirName: inputValue,\r\n            dirID: props.dirID\r\n          })\r\n          .then(\r\n            response => {\r\n              console.log(response);\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            }\r\n          );\r\n      }\r\n    }\r\n  });\r\n  // focus the cursor in the input field on edit start\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isInputActive]);\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      // if Enter is pressed, save the text and case the editor\r\n      if (enter) {\r\n        props.onSetText(inputValue);\r\n        setIsInputActive(false);\r\n        if (props.text !== inputValue) {\r\n          //Update database here\r\n          axios\r\n            .post('http://localhost:2000/update-name', {\r\n              jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\r\n              dirName: inputValue,\r\n              dirID: props.dirID\r\n            })\r\n            .then(\r\n              response => {\r\n                console.log(response);\r\n              },\r\n              error => {\r\n                console.log(error);\r\n              }\r\n            );\r\n        }\r\n      }\r\n      // if Escape is pressed, revert the text and close the editor\r\n      if (esc) {\r\n        setInputValue(props.text);\r\n        setIsInputActive(false);\r\n      }\r\n    }\r\n  }, [enter, esc]); // watch the Enter and Escape key presses\r\n  return (\r\n    <span className=\"inline-text\" ref={wrapperRef}>\r\n      <span\r\n        ref={textRef}\r\n        onClick={() => setIsInputActive(true)}\r\n        className={`inline-text_copy inline-text_copy--${\r\n          !isInputActive ? 'active' : 'hidden'\r\n        }`}\r\n      >\r\n        {props.text}\r\n      </span>\r\n      <input\r\n        ref={inputRef}\r\n        // set the width to the input length multiplied by the x height\r\n        // it's not quite right but gets it close\r\n        style={{ width: Math.ceil(inputValue.length * 0.9) + 'ex' }}\r\n        value={inputValue}\r\n        onChange={e => {\r\n          setInputValue(e.target.value);\r\n        }}\r\n        className={`inline-text_input inline-text_input--${\r\n          isInputActive ? 'active' : 'hidden'\r\n        }`}\r\n      />\r\n    </span>\r\n  );\r\n}\r\nexport default DirName;\r\n","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UploadForm.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\UserInvite.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\SignUp.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\Login.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\components\\FileUI.js",[],"C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useKeyPress.js",["62"],"// hook from https://usehooks.com/useKeyPress/\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Hook\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress;\r\n","C:\\Users\\samue\\Documents\\GitHub\\LimboDrive\\frontend\\src\\hooks\\useOnClickOutside.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":30,"column":6,"nodeType":"69","endLine":30,"endColumn":8,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":73,"column":6,"nodeType":"69","endLine":73,"endColumn":18,"suggestions":"72"},{"ruleId":"67","severity":1,"message":"73","line":32,"column":6,"nodeType":"69","endLine":32,"endColumn":8,"suggestions":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dirID'. Either include it or remove the dependency array.","ArrayExpression",["77"],"React Hook useEffect has missing dependencies: 'inputValue', 'isInputActive', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["78"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [dirID]",{"range":"86","text":"87"},"Update the dependencies array to be: [enter, esc, inputValue, isInputActive, props]",{"range":"88","text":"89"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"90","text":"91"},[772,774],"[dirID]",[2315,2327],"[enter, esc, inputValue, isInputActive, props]",[925,927],"[downHandler, upHandler]"]