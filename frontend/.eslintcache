[{"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js":"1","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js":"2","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/RoomSelection.js":"3","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js":"4","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js":"5","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js":"6","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js":"7","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/DirName.js":"8","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UserInvite.js":"9","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js":"10","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js":"11","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useKeyPress.js":"12","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useOnClickOutside.js":"13"},{"size":152,"mtime":1615417110645,"results":"14","hashOfConfig":"15"},{"size":474,"mtime":1615417110643,"results":"16","hashOfConfig":"15"},{"size":2141,"mtime":1615417110644,"results":"17","hashOfConfig":"15"},{"size":336,"mtime":1615417110644,"results":"18","hashOfConfig":"15"},{"size":1467,"mtime":1615417110644,"results":"19","hashOfConfig":"15"},{"size":1500,"mtime":1615657359589,"results":"20","hashOfConfig":"15"},{"size":1554,"mtime":1615698352682,"results":"21","hashOfConfig":"15"},{"size":3105,"mtime":1615417110644,"results":"22","hashOfConfig":"15"},{"size":906,"mtime":1615700234296,"results":"23","hashOfConfig":"15"},{"size":8081,"mtime":1615698565140,"results":"24","hashOfConfig":"15"},{"size":3713,"mtime":1615698762465,"results":"25","hashOfConfig":"15"},{"size":1020,"mtime":1615417110645,"results":"26","hashOfConfig":"15"},{"size":1106,"mtime":1615417110645,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"u76372",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js",[],["58","59"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/RoomSelection.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js",["60"],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nimport UploadForm from './UploadForm';\nimport DirName from './DirName';\nimport UserInvite from './UserInvite';\n\nimport './styles.css';\n\nconst io = require('socket.io-client');\nconst socket = io('http://localhost:2000');\n\nfunction Room() {\n  const [dirName, setDirName] = useState(null);\n  const [userFiles, setUserFiles] = useState(null);\n  const { dirID } = useParams();\n\n  socket.on('Update', (data) => {\n    setDirName(data.dirName);\n    setUserFiles(data.userFiles);\n  });\n\n  useEffect(() => {\n    if (localStorage.length > 0) {\n      axios\n        .post('http://localhost:2000/rooms-files/', {\n          jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n          dirID,\n        })\n        .then(\n          (response) => {\n            setDirName(response.data.dirName);\n            setUserFiles(response.data.userFiles);\n          },\n          (error) => {\n            console.log(error);\n          }\n        );\n    }\n  }, []);\n  return (\n    <>\n      {dirName && userFiles && (\n        <DirName\n          dirID={dirID}\n          text={dirName}\n          onSetText={(text) => setDirName(text)}\n        />\n      )}\n      {dirName && userFiles && (\n        <UploadForm fileTree={userFiles} dirID={dirID} socket={socket} />\n      )}\n      {dirName && userFiles && <UserInvite dirID={dirID} />}\n    </>\n  );\n}\n\nexport default Room;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/DirName.js",["61"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport useKeypress from '../hooks/useKeyPress';\nimport useOnClickOutside from '../hooks/useOnClickOutside';\nfunction DirName(props) {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(props.text);\n  const wrapperRef = useRef(null);\n  const textRef = useRef(null);\n  const inputRef = useRef(null);\n  const enter = useKeypress('Enter');\n  const esc = useKeypress('Escape');\n  // check to see if the user clicked outside of this component\n  useOnClickOutside(wrapperRef, () => {\n    if (isInputActive) {\n      props.onSetText(inputValue);\n      setIsInputActive(false);\n      if (props.text !== inputValue) {\n        //Update database here\n        axios\n          .post('http://localhost:2000/update-name', {\n            jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n            dirName: inputValue,\n            dirID: props.dirID\n          })\n          .then(\n            response => {\n              console.log(response);\n            },\n            error => {\n              console.log(error);\n            }\n          );\n      }\n    }\n  });\n  // focus the cursor in the input field on edit start\n  useEffect(() => {\n    if (isInputActive) {\n      inputRef.current.focus();\n    }\n  }, [isInputActive]);\n  useEffect(() => {\n    if (isInputActive) {\n      // if Enter is pressed, save the text and case the editor\n      if (enter) {\n        props.onSetText(inputValue);\n        setIsInputActive(false);\n        if (props.text !== inputValue) {\n          //Update database here\n          axios\n            .post('http://localhost:2000/update-name', {\n              jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n              dirName: inputValue,\n              dirID: props.dirID\n            })\n            .then(\n              response => {\n                console.log(response);\n              },\n              error => {\n                console.log(error);\n              }\n            );\n        }\n      }\n      // if Escape is pressed, revert the text and close the editor\n      if (esc) {\n        setInputValue(props.text);\n        setIsInputActive(false);\n      }\n    }\n  }, [enter, esc]); // watch the Enter and Escape key presses\n  return (\n    <span className=\"inline-text\" ref={wrapperRef}>\n      <span\n        ref={textRef}\n        onClick={() => setIsInputActive(true)}\n        className={`inline-text_copy inline-text_copy--${\n          !isInputActive ? 'active' : 'hidden'\n        }`}\n      >\n        {props.text}\n      </span>\n      <input\n        ref={inputRef}\n        // set the width to the input length multiplied by the x height\n        // it's not quite right but gets it close\n        style={{ width: Math.ceil(inputValue.length * 0.9) + 'ex' }}\n        value={inputValue}\n        onChange={e => {\n          setInputValue(e.target.value);\n        }}\n        className={`inline-text_input inline-text_input--${\n          isInputActive ? 'active' : 'hidden'\n        }`}\n      />\n    </span>\n  );\n}\nexport default DirName;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UserInvite.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js",["62","63","64"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useKeyPress.js",["65"],"// hook from https://usehooks.com/useKeyPress/\nimport { useState, useEffect } from 'react';\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useOnClickOutside.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":41,"column":6,"nodeType":"72","endLine":41,"endColumn":8,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":73,"column":6,"nodeType":"72","endLine":73,"endColumn":18,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":7,"column":5,"nodeType":"78","messageId":"79","endLine":7,"endColumn":17},{"ruleId":"70","severity":1,"message":"80","line":56,"column":13,"nodeType":"81","endLine":168,"endColumn":4},{"ruleId":"70","severity":1,"message":"82","line":168,"column":6,"nodeType":"72","endLine":168,"endColumn":8,"suggestions":"83"},{"ruleId":"70","severity":1,"message":"84","line":32,"column":6,"nodeType":"72","endLine":32,"endColumn":8,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dirID'. Either include it or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'inputValue', 'isInputActive', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["89"],"no-unused-vars","'selectedFile' is defined but never used.","Identifier","unusedVar","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'hostUploadFile', 'props.dirID', and 'props.socket'. Either include them or remove the dependency array.",["90"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [dirID]",{"range":"100","text":"101"},"Update the dependencies array to be: [enter, esc, inputValue, isInputActive, props]",{"range":"102","text":"103"},"Update the dependencies array to be: [hostUploadFile, props.dirID, props.socket]",{"range":"104","text":"105"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"106","text":"107"},[1062,1064],"[dirID]",[2243,2255],"[enter, esc, inputValue, isInputActive, props]",[4685,4687],"[hostUploadFile, props.dirID, props.socket]",[894,896],"[downHandler, upHandler]"]