[{"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js":"1","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js":"2","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js":"3","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js":"4","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js":"5","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js":"6"},{"size":400,"mtime":1611520810122,"results":"7","hashOfConfig":"8"},{"size":1428,"mtime":1610651986308,"results":"9","hashOfConfig":"8"},{"size":1737,"mtime":1610662620791,"results":"10","hashOfConfig":"8"},{"size":1411,"mtime":1611547832449,"results":"11","hashOfConfig":"8"},{"size":440,"mtime":1610651874344,"results":"12","hashOfConfig":"8"},{"size":1326,"mtime":1611095112831,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"u76372",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js",["28"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js",[],["29","30"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js",["31"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport FileUI from './FileUI';\n\nfunction createFileTree(e) {\n  let standardUploadFiles = document.getElementById('standard-upload-files')\n    .files;\n  e.preventDefault();\n\n  let fileTree = [];\n\n  let level = { fileTree };\n\n  for (let i = 0; i < standardUploadFiles.length; i++) {\n    //Recreate the file tree\n    standardUploadFiles[i].webkitRelativePath.split('/').reduce((r, name) => {\n      if (!r[name]) {\n        r[name] = { fileTree: [] };\n        r.fileTree.push({\n          name,\n          children: r[name].fileTree,\n          expand: false,\n          key: standardUploadFiles[i].webkitRelativePath\n        });\n      }\n      return r[name];\n    }, level);\n  }\n\n  //Send files to express server\n  axios\n    .post('http://localhost:2000/upload', {\n      fileTree\n    })\n    .then(\n      response => {\n        console.log(response);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n}\n\nfunction UploadForm() {\n  const [res, setRes] = useState(null);\n  useEffect(async () => {\n    const response = await axios.get('http://localhost:2000/placeholder');\n    setRes(response);\n  }, []);\n  return (\n    <>\n      <div id=\"upload-form\">\n        <h3>Select files from your computer</h3>\n        <form>\n          <input\n            type=\"file\"\n            name=\"files\"\n            id=\"standard-upload-files\"\n            webkitdirectory=\"true\"\n            mozdirectory=\"true\"\n          />\n          <input type=\"submit\" id=\"standard-upload\" onClick={createFileTree} />\n        </form>\n      </div>\n\n      <div id=\"upload-console\">\n        {res && <FileUI items={res.data} depth={0} />}\n      </div>\n    </>\n  );\n}\n\nexport default UploadForm;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js",[],{"ruleId":"32","severity":1,"message":"33","line":3,"column":8,"nodeType":"34","messageId":"35","endLine":3,"endColumn":18},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":47,"column":13,"nodeType":"42","endLine":50,"endColumn":4},"no-unused-vars","'UploadForm' is defined but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]