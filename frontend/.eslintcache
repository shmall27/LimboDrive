[{"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js":"1","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js":"2","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js":"3","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js":"4","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js":"5","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js":"6","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js":"7","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js":"8","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/RoomSelection.js":"9","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js":"10","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/DirName.js":"11","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useOnClickOutside.js":"12","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useKeyPress.js":"13","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UserInvite.js":"14"},{"size":152,"mtime":1612041815828,"results":"15","hashOfConfig":"16"},{"size":2058,"mtime":1614911479074,"results":"17","hashOfConfig":"16"},{"size":4298,"mtime":1614911471660,"results":"18","hashOfConfig":"16"},{"size":1454,"mtime":1612899126121,"results":"19","hashOfConfig":"16"},{"size":440,"mtime":1610651874344,"results":"20","hashOfConfig":"16"},{"size":1326,"mtime":1611095112831,"results":"21","hashOfConfig":"16"},{"size":474,"mtime":1613230668752,"results":"22","hashOfConfig":"16"},{"size":336,"mtime":1612044911027,"results":"23","hashOfConfig":"16"},{"size":2141,"mtime":1613781771668,"results":"24","hashOfConfig":"16"},{"size":1102,"mtime":1614961725689,"results":"25","hashOfConfig":"16"},{"size":3105,"mtime":1613784792628,"results":"26","hashOfConfig":"16"},{"size":1106,"mtime":1613255385466,"results":"27","hashOfConfig":"16"},{"size":1020,"mtime":1613255352906,"results":"28","hashOfConfig":"16"},{"size":906,"mtime":1614306427434,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"u76372",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js",[],["62","63"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js",["64","65"],"import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport FileUI from './FileUI';\n\nfunction UploadForm(props) {\n  let db;\n  useEffect(() => {\n    //IndexDB implementation\n    if (!window.indexedDB) {\n      console.log(\n        \"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\"\n      );\n    } else {\n      let request = indexedDB.open('virtualFS');\n\n      request.onupgradeneeded = e => {\n        db = e.target.result;\n        db.createObjectStore('file_tree', {\n          keyPath: 'name'\n        });\n      };\n\n      request.onerror = e => {\n        console.log('There was an error creating an indexedDB');\n      };\n\n      request.onsuccess = e => {\n        db = e.target.result;\n        const tx = db.transaction('file_tree', 'readonly');\n        const req = tx.objectStore('file_tree').openCursor();\n\n        req.onsuccess = e => {\n          const cursor = e.target.result;\n          if (cursor) {\n            console.log(cursor.value);\n            cursor.continue();\n          }\n        };\n      };\n    }\n  }, []);\n\n  if (localStorage.length > 0) {\n    return (\n      <>\n        <div>\n          <button\n            id=\"standard-upload\"\n            onClick={async () => {\n              const dirHandle = await window.showDirectoryPicker();\n              const fileTree = await fileRecursion(dirHandle, '');\n\n              async function fileRecursion(folder, path) {\n                let miniTree = {\n                  name: folder.name,\n                  handle: folder,\n                  expand: false,\n                  children: [],\n                  path: path + '/' + String(folder.name)\n                };\n                for await (const entry of folder.values()) {\n                  if (entry.kind == 'directory') {\n                    miniTree['children'].push(\n                      await fileRecursion(entry, miniTree.path)\n                    );\n                  } else {\n                    miniTree['children'].push({\n                      name: entry.name,\n                      handle: entry,\n                      expand: false,\n                      children: [],\n                      path: miniTree.path + '/' + String(entry.name)\n                    });\n                  }\n                }\n                return miniTree;\n              }\n\n              console.log(fileTree);\n              //Save file to indexDB\n              const rx = db.transaction('file_tree', 'readwrite');\n              rx.onerror = e => console.log(`Error: ${e.target.error}`);\n              rx.objectStore('file_tree').add(fileTree);\n\n              //Send files to express server\n              if (localStorage.length > 0) {\n                axios\n                  .post('http://localhost:2000/upload', {\n                    dirID: props.dirID,\n                    fileTree: {\n                      name: fileTree.name,\n                      path: fileTree.path,\n                      children: fileTree.children\n                    },\n                    jwt: JSON.parse(window.localStorage.getItem('jwt')).data\n                  })\n                  .then(\n                    response => {\n                      console.log(response);\n                    },\n                    error => {\n                      console.log(error);\n                    }\n                  );\n              } else console.log('Please sign in.');\n            }}\n          >\n            Upload Folders\n          </button>\n        </div>\n\n        <div id=\"upload-console\">\n          {props.fileTree &&\n            props.fileTree.map(userUpload => {\n              if (userUpload.fileTree.length > 0) {\n                return (\n                  <div key={userUpload._id}>\n                    <h3>{userUpload.hostEmail}</h3>\n                    <FileUI\n                      items={userUpload.fileTree}\n                      dirID={props.dirID}\n                      host={userUpload.hostID}\n                      depth={0}\n                    />\n                  </div>\n                );\n              } else {\n                return <h2>No files uploaded to this drive.</h2>;\n              }\n            })}\n        </div>\n      </>\n    );\n  } else {\n    window.location.href = 'http://localhost:3000/';\n  }\n}\n\nexport default UploadForm;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/RoomSelection.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js",["66"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/DirName.js",["67"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport useKeypress from '../hooks/useKeyPress';\nimport useOnClickOutside from '../hooks/useOnClickOutside';\nfunction DirName(props) {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(props.text);\n  const wrapperRef = useRef(null);\n  const textRef = useRef(null);\n  const inputRef = useRef(null);\n  const enter = useKeypress('Enter');\n  const esc = useKeypress('Escape');\n  // check to see if the user clicked outside of this component\n  useOnClickOutside(wrapperRef, () => {\n    if (isInputActive) {\n      props.onSetText(inputValue);\n      setIsInputActive(false);\n      if (props.text !== inputValue) {\n        //Update database here\n        axios\n          .post('http://localhost:2000/update-name', {\n            jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n            dirName: inputValue,\n            dirID: props.dirID\n          })\n          .then(\n            response => {\n              console.log(response);\n            },\n            error => {\n              console.log(error);\n            }\n          );\n      }\n    }\n  });\n  // focus the cursor in the input field on edit start\n  useEffect(() => {\n    if (isInputActive) {\n      inputRef.current.focus();\n    }\n  }, [isInputActive]);\n  useEffect(() => {\n    if (isInputActive) {\n      // if Enter is pressed, save the text and case the editor\n      if (enter) {\n        props.onSetText(inputValue);\n        setIsInputActive(false);\n        if (props.text !== inputValue) {\n          //Update database here\n          axios\n            .post('http://localhost:2000/update-name', {\n              jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n              dirName: inputValue,\n              dirID: props.dirID\n            })\n            .then(\n              response => {\n                console.log(response);\n              },\n              error => {\n                console.log(error);\n              }\n            );\n        }\n      }\n      // if Escape is pressed, revert the text and close the editor\n      if (esc) {\n        setInputValue(props.text);\n        setIsInputActive(false);\n      }\n    }\n  }, [enter, esc]); // watch the Enter and Escape key presses\n  return (\n    <span className=\"inline-text\" ref={wrapperRef}>\n      <span\n        ref={textRef}\n        onClick={() => setIsInputActive(true)}\n        className={`inline-text_copy inline-text_copy--${\n          !isInputActive ? 'active' : 'hidden'\n        }`}\n      >\n        {props.text}\n      </span>\n      <input\n        ref={inputRef}\n        // set the width to the input length multiplied by the x height\n        // it's not quite right but gets it close\n        style={{ width: Math.ceil(inputValue.length * 0.9) + 'ex' }}\n        value={inputValue}\n        onChange={e => {\n          setInputValue(e.target.value);\n        }}\n        className={`inline-text_input inline-text_input--${\n          isInputActive ? 'active' : 'hidden'\n        }`}\n      />\n    </span>\n  );\n}\nexport default DirName;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useOnClickOutside.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/hooks/useKeyPress.js",["68"],"// hook from https://usehooks.com/useKeyPress/\nimport { useState, useEffect } from 'react';\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UserInvite.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":17,"column":14,"nodeType":"75","endLine":17,"endColumn":29},{"ruleId":"76","severity":1,"message":"77","line":62,"column":34,"nodeType":"78","messageId":"79","endLine":62,"endColumn":36},{"ruleId":"73","severity":1,"message":"80","line":30,"column":6,"nodeType":"81","endLine":30,"endColumn":8,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":73,"column":6,"nodeType":"81","endLine":73,"endColumn":18,"suggestions":"84"},{"ruleId":"73","severity":1,"message":"85","line":32,"column":6,"nodeType":"81","endLine":32,"endColumn":8,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","Assignments to the 'db' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'dirID'. Either include it or remove the dependency array.","ArrayExpression",["89"],"React Hook useEffect has missing dependencies: 'inputValue', 'isInputActive', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["90"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [dirID]",{"range":"98","text":"99"},"Update the dependencies array to be: [enter, esc, inputValue, isInputActive, props]",{"range":"100","text":"101"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"102","text":"103"},[743,745],"[dirID]",[2243,2255],"[enter, esc, inputValue, isInputActive, props]",[894,896],"[downHandler, upHandler]"]