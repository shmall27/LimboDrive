[{"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js":"1","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js":"2","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js":"3","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js":"4","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js":"5","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js":"6","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js":"7","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js":"8","/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js":"9"},{"size":152,"mtime":1612041815828,"results":"10","hashOfConfig":"11"},{"size":1428,"mtime":1610651986308,"results":"12","hashOfConfig":"11"},{"size":3038,"mtime":1612990608616,"results":"13","hashOfConfig":"11"},{"size":1454,"mtime":1612899126121,"results":"14","hashOfConfig":"11"},{"size":440,"mtime":1610651874344,"results":"15","hashOfConfig":"11"},{"size":1326,"mtime":1611095112831,"results":"16","hashOfConfig":"11"},{"size":465,"mtime":1612990630054,"results":"17","hashOfConfig":"11"},{"size":336,"mtime":1612044911027,"results":"18","hashOfConfig":"11"},{"size":2131,"mtime":1612982665768,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"u76372",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/index.js",[],["40","41"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/FileUI.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/UploadForm.js",["42","43"],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Login.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Signup.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/SignUp.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/App.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Home.js",[],"/Users/samhall/Documents/GitHub/LimboDrive/frontend/src/components/Room.js",["44"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Rooms() {\n  const [dirName, setDirName] = useState(null);\n  useEffect(async () => {\n    if (localStorage.length > 0) {\n      axios\n        .post('http://localhost:2000/rooms', {\n          jwt: JSON.parse(window.localStorage.getItem('jwt')).data\n        })\n        .then(\n          response => {\n            setDirName(response.data);\n          },\n          error => {\n            console.log(error);\n          }\n        );\n    }\n  }, []);\n  if (localStorage.length > 0) {\n    return (\n      <>\n        <h3>Select a room or create a new one!</h3>\n        <br />\n        <button\n          onClick={e => {\n            e.preventDefault();\n            if (localStorage.length > 0) {\n              axios\n                .post('http://localhost:2000/room-create', {\n                  jwt: JSON.parse(window.localStorage.getItem('jwt')).data\n                })\n                .then(\n                  response => {},\n                  error => {\n                    console.log(error);\n                  }\n                );\n            }\n          }}\n          type=\"button\"\n        >\n          Create a new room!\n        </button>\n        {dirName &&\n          dirName.map(dirs => (\n            <p\n              onClick={e => {\n                if (localStorage.length > 0) {\n                  axios\n                    .post('http://localhost:2000/room-select', {\n                      jwt: JSON.parse(window.localStorage.getItem('jwt')).data,\n                      dirID: dirs[1]\n                    })\n                    .then(\n                      response => {\n                        window.location.href = `http://localhost:3000/rooms/${dirs[1]}`;\n                      },\n                      error => {\n                        console.log(error);\n                      }\n                    );\n                }\n              }}\n              key={dirs[1]}\n            >\n              {dirs[0]}\n            </p>\n          ))}\n      </>\n    );\n  } else {\n    window.location.href = 'http://localhost:3000/';\n  }\n}\n\nexport default Rooms;\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":9,"column":13,"nodeType":"51","endLine":25,"endColumn":4},{"ruleId":"49","severity":1,"message":"52","line":25,"column":6,"nodeType":"53","endLine":25,"endColumn":8,"suggestions":"54"},{"ruleId":"49","severity":1,"message":"50","line":6,"column":13,"nodeType":"51","endLine":21,"endColumn":4},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'dirID'. Either include it or remove the dependency array.","ArrayExpression",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [dirID]",{"range":"60","text":"61"},[650,652],"[dirID]"]